{
  "name": "Lazy-attribute",
  "tagline": "Minimizing find_by query for a single repeated attribute",
  "body": "# Lazy Attribute\r\n\r\nThis gem provides a simple and extremely flexible way to use most frequent find_by query in a model.\r\nYou can minimize find_by query of a particular attribute in a model using lazy attribute gem.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'lazy-attribute'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install lazy-attribute\r\n\r\n## Usage\r\n\r\nIn Model\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n\r\n  lazy_attribute :email\r\n\r\nend\r\n```\r\n\r\n```ruby\r\nUser['sample@email.com']\r\n```\r\n\r\nWill give you the user object matches with the email and will return nil if record not found\r\n\r\n```ruby\r\nlazy_attribute :email, raise_error: true\r\n```\r\n\r\nWill give you the user object matches with the email and will raise ``` ActiveRecord::RecordNotFound ``` Exception if record not found\r\n\r\nYou can use more than one lazy_attribute to your model by providing unique key for that\r\n\r\n```ruby\r\nlazy_attribute :first_name, raise_error: true, key: :fn\r\n```\r\n\r\n```ruby\r\nUser.fn('first name')\r\n```\r\n\r\n```ruby\r\nlazy_attribute :email, create_if_not_found: true\r\n```\r\n\r\nWill try to fetch the user object with the matched email address, if the record is not found in the db the same will be created.  If any error like validation protected the record being saved, then the new built object will be returned.\r\n\r\n```ruby\r\nuser = User['invalid email']\r\n\r\nuser.errors.message\r\n=> {:email=>[\"Please enter valid email format\"]}\r\n```\r\n\r\nif you want the exception needs to be threw, then use the ```raise_error: true``` option",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}